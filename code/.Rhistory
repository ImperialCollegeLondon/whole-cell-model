dR = R_g*R - R_d*R #change in population of R
R = 1 #R is the number of rhiozbial bacteria
R_g = 0.5 #R_g is growth rate of R
R_d = 0.5 #R_d is the death rate of R
P = 10 #P is the plant mass
dR = R_g*R - R_d*R #change in population of R
P = 10 #P is the plant mass
P_g = 0.1 #plant growth rate
P_d = 0.1 #plant death rate
dR = R_g*R - R_d*R #change in population of R
dP = P_g*P - P_d*P #change in mass of plant
P_g = 0.1 #plant growth rate
source('C:/Users/leann/Dropbox/PhD-work/code/game_theory/2019_11_07_model_1.R')
source('C:/Users/leann/Dropbox/PhD-work/code/game_theory/2019_11_07_model_1.R')
diffeqr::diffeq_setup()
install.packages("diffeqr")
return(dR, dP)
f<- function(u,p,t){
dR = R_g*R*(K-Z) - R_d*R #change in population of R
dP = P_g*P - P_d*P #change in mass of plant
return(dR, dP)
}
f<- function(init,p,t){
dR = R_g*R*(K-Z) - R_d*R #change in population of R
dP = P_g*P - P_d*P #change in mass of plant
return(dR, dP)
}
init = {R,R_g,R_d,P,P_g,P_d,K,Z}
init = list(R,R_g,R_d,P,P_g,P_d,K,Z)
diffeqr::diffeq_setup()
install.packages("Julia")
diffeqr::diffeq_setup()
library("Julia", lib.loc="~/R/win-library/3.4")
#Model 1, deterministic, not spatially explicit
#one equation for bacteria and one for plant
#solve for steady state
library('Julia')
diffeqr::diffeq_setup()
library("JuliaCall", lib.loc="~/R/win-library/3.4")
library('JuliaCall')
diffeqr::diffeq_setup()
#Model 1, deterministic, not spatially explicit
#one equation for bacteria and one for plant
#solve for steady state
library('Julia')
library('JuliaCall')
diffeqr::diffeq_setup()
source('C:/Users/leann/Dropbox/PhD-work/code/game_theory/2019_11_07_model_1.R')
library("diffeqr", lib.loc="~/R/win-library/3.4")
library('diffeqr')
diffeqr::diffeq_setup()
source('C:/Users/leann/Dropbox/PhD-work/code/game_theory/2019_11_07_model_1.R')
install.packages(c("ade4", "diffusionMap", "ExPosition", "factoextra", "FactoMineR", "ggplot2", "gridExtra", "R.utils", "reshape2"))
source('C:/Users/leann/Dropbox/PhD-work/git-code/whole-cell-model/code/pca-script.R')
setwd("C:/Users/leann/Dropbox/PhD-work/git-code/whole-cell-model/code")
source('C:/Users/leann/Dropbox/PhD-work/git-code/whole-cell-model/code/pca-script.R')
source('C:/Users/leann/Dropbox/PhD-work/git-code/whole-cell-model/code/pca-script.R')
plot(mca2$li[,1], mca2$li[,2], col = colr2,xlab = x1, ylab = x2)
# mca1<- MCA(cat_data)
plot(mca1, col.ind = cat_data$ID, axes = c(2,4))
fviz_mca_ind(mca1, label = "none", habillage = cat_data$ID, addEllipses = T,  axes = c(2,3))#, ellipse.type = "confidence")
fviz_mca_ind(mca1, label = "none", habillage = cat_data$ID, addEllipses = T,  axes = c(1,2))#, ellipse.type = "confidence")
fviz_mca_ind(mca1, label = "none", habillage = cat_data$ID, addEllipses = T,  axes = c(1,3))#, ellipse.type = "confidence")
fviz_mca_ind(mca1, label = "none", habillage = cat_data$ID, addEllipses = T,  axes = c(1,2,3))#, ellipse.type = "confidence")
fviz_mca_ind(mca1, label = "none", habillage = cat_data$ID, addEllipses = T,  axes = c(2,3))#, ellipse.type = "confidence")
fviz_mca_ind(mca1, label = "none", habillage = cat_data$ID, addEllipses = T,  axes = c(1,4))#, ellipse.type = "confidence")
fviz_mca_ind(mca1, label = "none", habillage = cat_data$ID, addEllipses = T,  axes = c(1,5))#, ellipse.type = "confidence")
fviz_mca_ind(mca1, label = "none", habillage = cat_data$ID, addEllipses = T,  axes = c(1,6))#, ellipse.type = "confidence")
fviz_mca_ind(mca1, label = "none", habillage = cat_data$ID, addEllipses = T,  axes = c(2,5))#, ellipse.type = "confidence")
fviz_mca_ind(mca1, label = "none", habillage = cat_data$ID, addEllipses = T,  axes = c(3,5))#, ellipse.type = "confidence")
fviz_mca_ind(mca1, label = "none", habillage = cat_data$ID, addEllipses = T,  axes = c(4,5))#, ellipse.type = "confidence")
fviz_mca_ind(mca1, label = "none", habillage = cat_data$ID, addEllipses = T,  axes = c(3,4))#, ellipse.type = "confidence")
fviz_mca_ind(mca1, label = "none", habillage = cat_data$ID, addEllipses = T,  axes = c(3,5))#, ellipse.type = "confidence")
View(cat_data)
mca1<- MCA(cat_data[,1:7])#, quali.sup = cat_data$ID)
# mca1<- MCA(cat_data)
plot(mca1, col.ind = cat_data$ID, axes = c(2,4))
fviz_screeplot(mca1, addlabels = T )
var <- get_mca_var(mca1)
fviz_mca_var(mca1, repel = T)#repel means the labels wont overlap but this takes a while to plot
# fviz_mca_biplot(mca1, col.ind = cat_data$ID, axes = c(1,2)) #the default plot the two most informative dimensions
# fviz_mca_biplot(mca1, col.ind = cat_data$ID, axes = c(1,3))
# fviz_mca_biplot(mca1, col.ind = cat_data$ID, axes = c(1,4))
# fviz_mca_biplot(mca1, col.ind = cat_data$ID, axes = c(1,5))
fviz_mca_biplot(mca1, col.ind = cat_data$ID)#, axes = c(2,3))
fviz_mca_ind(mca1, label = "none", habillage = cat_data$ID, addEllipses = T,  axes = c(3,5))#, ellipse.type = "confidence")
fviz_mca_ind(mca1, label = "none", habillage = cat_data$ID, addEllipses = T,  axes = c(1,2))#, ellipse.type = "confidence")
View(all_data)
# round(var$contrib,2)
fviz_contrib(mca1, choice = "var", axes = 1:7)
# round(var$contrib,2)
fviz_contrib(mca1, choice = "var", axes = 1:5)
mca1<- MCA(cat_data[,1:6])#, quali.sup = cat_data$ID)
# mca1<- MCA(cat_data)
plot(mca1, col.ind = cat_data$ID, axes = c(2,4))
fviz_screeplot(mca1, addlabels = T )
var <- get_mca_var(mca1)
fviz_mca_var(mca1, repel = T)#repel means the labels wont overlap but this takes a while to plot
# fviz_mca_biplot(mca1, col.ind = cat_data$ID, axes = c(1,2)) #the default plot the two most informative dimensions
# fviz_mca_biplot(mca1, col.ind = cat_data$ID, axes = c(1,3))
# fviz_mca_biplot(mca1, col.ind = cat_data$ID, axes = c(1,4))
# fviz_mca_biplot(mca1, col.ind = cat_data$ID, axes = c(1,5))
fviz_mca_biplot(mca1, col.ind = cat_data$ID)#, axes = c(2,3))
fviz_mca_ind(mca1, label = "none", habillage = cat_data$ID, addEllipses = T,  axes = c(1,2))#, ellipse.type = "confidence")
fviz_mca_var(mca1, col.var = "cos2", gradient.cols = c("red", "green") , axes = c(2,5))
fviz_cos2(mca1, choice = "var", axes = 2:3)#shows how well represented each factor is by the two dimenstions indicated. if there are
# round(var$contrib,2)
fviz_contrib(mca1, choice = "var", axes = 1:5)
# head(ind$contrib)
fviz_contrib(mca1, choice = "ind", axes = 1:5, top = 20)
fviz_mca_ind(mca1, label = "none", habillage = cat_data$ID, addEllipses = T,  axes = c(1,2))#, ellipse.type = "confidence")
fviz_mca_ind(mca1, label = "none", habillage = cat_data$ID, addEllipses = T)#,  axes = c(1,2))#, ellipse.type = "confidence")
fviz_mca_var(mca1, col.var = "cos2", gradient.cols = c("red", "green") , axes = c(2,5))
fviz_mca_var(mca1, col.var = "cos2")#, gradient.cols = c("red", "green") , axes = c(2,5))
fviz_cos2(mca1, choice = "var", axes = 2:3)#shows how well represented each factor is by the two dimenstions indicated. if there are
# fviz_mca_biplot(mca1, col.ind = cat_data$ID, axes = c(1,2)) #the default plot the two most informative dimensions
# fviz_mca_biplot(mca1, col.ind = cat_data$ID, axes = c(1,3))
# fviz_mca_biplot(mca1, col.ind = cat_data$ID, axes = c(1,4))
# fviz_mca_biplot(mca1, col.ind = cat_data$ID, axes = c(1,5))
fviz_mca_biplot(mca1, col.ind = cat_data$ID)#, axes = c(2,3))
pca1= dudi.pca(df = log_data[,1:6], center = T, scale = T)
x1 = paste("PC1",round(eig[1],2),"%")
x2 = paste("PC2",round(eig[2],2),"%")
a = rep("green",sum(all_data$ID=="g"))
b = rep("red",sum(all_data$ID=="b"))
c = rep("blue", sum(all_data$ID =="u"))
colr2 = c(a,b,c)
plot(pca1$li[,1], pca1$li[,2], xlab = x1, ylab = x2, col = colr2, pch = 16, cex = 0.8)
plot(pca1$li[,1], pca1$li[,3], xlab = x1, ylab = x2, col = colr2, pch = 16, cex = 0.8)
plot(pca1$li[,3], pca1$li[,2], xlab = x1, ylab = x2, col = colr2, pch = 16, cex = 0.8)
fviz_mca_var(mca1, col.var = "cos2")#, gradient.cols = c("red", "green") , axes = c(2,5))
# round(var$contrib,2)
fviz_contrib(mca1, choice = "var", axes = 1:5)
result_des<- dimdesc(mca1, axes = c(1,2))
result_des[[2]]
# head(ind$contrib)
fviz_contrib(mca1, choice = "ind", axes = 1, top = 20)
# round(var$contrib,2)
fviz_contrib(mca1, choice = "var", axes = 1)
# fviz_mca_biplot(mca1, col.ind = cat_data$ID, axes = c(1,2)) #the default plot the two most informative dimensions
# fviz_mca_biplot(mca1, col.ind = cat_data$ID, axes = c(1,3))
# fviz_mca_biplot(mca1, col.ind = cat_data$ID, axes = c(1,4))
# fviz_mca_biplot(mca1, col.ind = cat_data$ID, axes = c(1,5))
fviz_mca_biplot(mca1, col.ind = cat_data$ID)#, axes = c(2,3))
mca1<- MCA(cat_data[,1:6])#, quali.sup = cat_data$ID)
mca1<- MCA(cat_data[,1:6], quali.sup = cat_data$ID)
# mca1<- MCA(cat_data)
plot(mca1, col.ind = cat_data$ID, axes = c(2,4))
fviz_screeplot(mca1, addlabels = T )
var <- get_mca_var(mca1)
fviz_mca_var(mca1, repel = T)#repel means the labels wont overlap but this takes a while to plot
# fviz_mca_biplot(mca1, col.ind = cat_data$ID, axes = c(1,2)) #the default plot the two most informative dimensions
# fviz_mca_biplot(mca1, col.ind = cat_data$ID, axes = c(1,3))
# fviz_mca_biplot(mca1, col.ind = cat_data$ID, axes = c(1,4))
# fviz_mca_biplot(mca1, col.ind = cat_data$ID, axes = c(1,5))
fviz_mca_biplot(mca1, col.ind = cat_data$ID)#, axes = c(2,3))
fviz_mca_ind(mca1, label = "none", habillage = cat_data$ID, addEllipses = T,  axes = c(1,2))#, ellipse.type = "confidence")
cat_data[,1:6]
mca2= dudi.acm(cat_data[,1:6], scannf = F, nf = 6)
a = rep("green",sum(all_data$ID=="g"))
b = rep("red",sum(all_data$ID=="b"))
colr2 = c(a,b)
eig = 100*mca2$eig/sum(mca2$eig)
x1 = paste("PC1",round(eig[1],2),"%")
x2 = paste("PC2",round(eig[2],2),"%")
plot(mca2$li[,1], mca2$li[,2], col = colr2,xlab = x1, ylab = x2)
plot(mca2$li[,2], mca2$li[,3], col = colr2,xlab = x1, ylab = x2)
pca1= dudi.pca(df = log_data[,1:6], center = T, scale = T)
x1 = paste("PC1",round(eig[1],2),"%")
x2 = paste("PC2",round(eig[2],2),"%")
a = rep("green",sum(all_data$ID=="g"))
b = rep("red",sum(all_data$ID=="b"))
c = rep("blue", sum(all_data$ID =="u"))
colr2 = c(a,b,c)
plot(pca1$li[,1], pca1$li[,2], xlab = x1, ylab = x2, col = colr2, pch = 16, cex = 0.8)
plot(pca1$li[,1], pca1$li[,3], xlab = x1, ylab = x2, col = colr2, pch = 16, cex = 0.8)
plot(pca1$li[,3], pca1$li[,2], xlab = x1, ylab = x2, col = colr2, pch = 16, cex = 0.8)
View(the_good)
View(the_good)
pca_good = dudi.pca(df = the_good[,1,6])
pca_good$li
plot(pca_good$li[,1], pca_good$li[,2], xlab = x1, ylab = x2, col = colr2, pch = 16, cex = 0.8)
x1 = paste("PC1",round(eig[1],2),"%")
x2 = paste("PC2",round(eig[2],2),"%")
plot(pca_good$li[,1], pca_good$li[,2], xlab = x1, ylab = x2, col = colr2, pch = 16, cex = 0.8)
pca_good = dudi.pca(df = the_good[,1,6], center = T, scale = T)
x2 = paste("PC2",round(eig[2],2),"%")
plot(pca_good$li[,1], pca_good$li[,2], xlab = x1, ylab = x2, col = colr2, pch = 16, cex = 0.8)
pca_good = dudi.pca(df = the_good[,1,6], center = T, scale = T)
View(pca_good)
plot(pca_good$li[,1], pca_good$li[,2])#, xlab = x1, ylab = x2, col = colr2, pch = 16, cex = 0.8)
pca_good = dudi.pca(df = the_good[,1,6], center = T, scale = T)
pca_good = dudi.pca(df = the_good[,1,6], center = T, scale = T)
plot(pca_good$li[,1], pca_good$li[,2])#, xlab = x1, ylab = x2, col = colr2, pch = 16, cex = 0.8)
pca_good$li
plot(pca1$li[,1], pca1$li[,2], xlab = x1, ylab = x2, col = colr2, pch = 16, cex = 0.8)
?dudi.pca
pca_good
plot(pca_good$li[,1], pca_good$co[,1])#, xlab = x1, ylab = x2, col = colr2, pch = 16, cex = 0.8)
plot(pca_good$li, pca_good$co)#, xlab = x1, ylab = x2, col = colr2, pch = 16, cex = 0.8)
pca_good$co
plot(the_good[,3],the_good[,4])
plot(the_good[,3],the_good[,4], the_good[,5])
plot(the_good[,3],the_good[,4])
plot(the_good[,4],the_good[,5])
qplot(the_good[,4],the_good[,5])
qplot(the_good[,4],the_good[,5], scale_x_log10())
qplot(the_good[,4],the_good[,5], aes(scale_x_log10()))
qplot(the_good[,4],the_good[,5]) + scale_x_log10()
qplot(the_good[,4],the_good[,5]) + scale_x_log10() + scale_y_log10()
qplot(the_good[,4],the_good[,5]) + scale_x_log10() + scale_y_log10() + theme_bw()
?scatter.dudi
scatter.dudi(pca_good)
scatter(pca_good)
scatter(pca_good)
scatter(pca_good, xax = 1, yax = 2)
scatter(dudi.pca(the_good[,1,6], scannf = FALSE), xax = 1, yax = 2)
library(ggplot2)
library(reshape2)
setwd("C:/Users/leann/Dropbox/PhD-work/git-code/whole-cell-model/code")
# important_data <- read.csv("param-sweep5-results.csv")
# raw_data <- read.csv("../data/0.1/param-sweep-0.1-0.1-0.1-0.1-1000.0-0.1.csv")#oscillation
# raw_data <- read.csv("../data/param-sweep-10.0-10.0-10.0-10.0-10.0-10.0.csv")
raw_data<- read.csv("../data/latest-output.csv")
# raw_data<- important_data[-1]
sorted_data= raw_data[,order(names(raw_data))]
colnames(sorted_data)<- substring(names(sorted_data),6)
sorted_again<-sorted_data[,c("tamp","1","15","21","22","20","2","3","4","5","6","7","8","9","10","12","13","14","23","24","25")]
colnames(sorted_again)= c("timestep","S_external","NH4","ATP","AA","num cells","ribo mrna comp","metab enzyme","housekpng mrna comp","trans mrna comp","trans prot","metab mrna comp","trans mrna","metab mrna","housekeep prot","housekeep mrna","ribo mrna","free ribo","AA prot","AA mRNA","AA mrna comp")
# sorted_again<-sorted_data[,c("tamp","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25")]
# colnames(sorted_again)= c("timestep","1S_external","2ribo mrna comp","3metab enzyme","4housekpng mrna comp","5trans mrna comp","6transporter prot","7metab mrna comp","8trans mrna","9metab mrna","10housekepng prot","11si","12housekpng mrna","13ribo mrna","14free ribo","15NH4 int","16nit mrna","17nit mrna comp","18nitrogenase","19cumulative NH4","20num cells","21ATP","22AA","23AA prot","24AA mRNA","25AA mrna comp")
short_data<- sorted_again[sorted_again$timestep > 0 ,]
short_data<- short_data[short_data$timestep < 31000 ,]
melted_data<- melt(sorted_again, id.var="timestep")
melted_short<- melt(short_data, id.var="timestep")
plt1 = ggplot(data = melted_short, aes(x = timestep, y = log10(value+0.1))) +theme_bw() +theme(legend.position = "none")+ labs(y="Log Molecules", x = "Time")+geom_line(aes(color = variable), size = 2)+ facet_wrap(~ variable, ncol = 5)
plt1
